---
title: "Random Forest with SD Variables Only"
format: html
---


Load in necessary libraries:
```{r}
library(janitor)
library(tree)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(caret)
library(ranger)
library(vip)
library(GGally)
```


Read in dataset:
```{r}
library(here)
RL_numeric <- read_csv(here("RL_Datasets/RL_numeric.csv"), 
        col_types = cols(winner_factor = readr::col_factor()))
```


```{r}
RL_numeric_sd <- RL_numeric %>% select(series_id, winner_factor, 
                                       starts_with("sd"))
```


Build Random Forest Model:
```{r}
set.seed(993)
RL_splits <- group_initial_split(RL_numeric_sd, group = series_id, prop = 0.8)
RL_train <- training(RL_splits)
RL_test <- testing(RL_splits)
```

The Random Forest model predicted game outcome with 95.537% accuracy.


Cleaner visual of the random forest tree output:
```{r}
library(rpart)
library(rpart.plot)
clean_tree <- rpart(winner_factor ~ . - series_id, data = RL_train)
clean_tree
rpart.plot(clean_tree)
```


Build actual Random Forest model:
```{r}
# Preprocess the data for modelling
RL_recipe <- recipe(winner_factor ~ ., data = RL_train) %>% 
  step_rm(series_id) %>%
  step_normalize(all_numeric_predictors()) 

# Build a random forest model specification
rf_spec <- rand_forest() %>% 
  set_engine("ranger", importance = "impurity") %>% 
  set_mode("classification")

# Bundle recipe and model spec into a workflow
rf_wf <- workflow() %>% 
  add_recipe(RL_recipe) %>% 
  add_model(rf_spec)

# Fit a model
rf_wf_fit <- rf_wf %>% 
  fit(data = RL_train)

# Make predictions on test data
results <- RL_test %>% select(winner_factor) %>% 
  bind_cols(rf_wf_fit %>% 
              predict(new_data = RL_test)) %>% 
  bind_cols(rf_wf_fit %>% 
              predict(new_data = RL_test, type = "prob"))

# Print out predictions
results %>% 
  slice_head(n = 10)
```

```{r}
# get results in a confusion matrix:
results %>% 
  conf_mat(winner_factor, .pred_class)
```

```{r}
(1797 + 328)/(1797 + 1134 + 243 + 328)
```

The random forest model classified game outcome (win/loss) with 86.21% 
accuracy.


See the importance of variables in the random forest model:
```{r}
# Extract the fitted model from the workflow
rf_wf_fit %>% 
  extract_fit_parsnip() %>% 
# Make VIP plot
  vip()
```


Plots to visualize top 4 in terms of importance vs. winner:
```{r}
ggpairs(data = RL_numeric_sd, columns = c("winner_factor", 
                                      "sd_core_shots_blue_diff",
                                  "sd_boost_amount_overfill_stolen_blue_diff",
                                  "sd_boost_time_full_boost_blue_diff",
                                  "sd_boost_time_zero_boost_blue_diff"), 
        lower = list(combo = wrap(ggally_facethist, bins = 15)))
```


