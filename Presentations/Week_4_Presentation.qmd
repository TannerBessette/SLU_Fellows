---
title: "Predicting Rocket League Game Outcome Through Statistical Modeling"
author: "By Tanner Bessette"
format:
  revealjs: 
    theme: moon
---

## Introduction/Overview of Dataset

-   Rocket League is a car-soccer video game

-   For this project, exploring the 3v3 game mode

-   103 Variables include shots taken, boost used, etc.

    -   Dataset has games from RLCS 2021-2022 season

    -   17,797 professional games

## Project Goals

-   Get an idea of what variables are most associated with winning games

-   Build a model to try to predict game outcome based on a subset of the variables

-   Discover whether certain approaches or tactics are more/less associated with winning

-   Findings may be used to help strategize/coach

## Exploratory Plots:

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(here)
rl_df <- read.csv(here("RL_Datasets/games_by_teams.csv"))
# Create a dataset with all of the diff variables
team_diff <- rl_df |> pivot_wider(id_cols = game_id, 
                                  names_from = color,
                                  values_from = -c(1, 2)) |>
  ## all diffs are blue team minus orange team
  mutate(across(where(is.numeric) & ends_with("_blue"),
                .names = "{col}_diff") -
           across(where(is.numeric) & ends_with("_orange"))) |>
  mutate(winner_numeric = if_else(winner_blue == "True",
                                 true = 1,
                                 false = 0)) |> ## winner is 1 for blue, 
                                                ## 0 for orange
  select(game_id, team_id_blue, team_id_orange, winner_numeric, 
         ends_with("_diff"), everything())

# Removing "blue" and "orange" from all of the variable names:
old_names <- names(team_diff)
new_names <- str_remove(old_names, pattern = "_blue") 
names(team_diff) <- new_names

# Remove some of the unnecessary variables to tidy the dataset:
team_diff <- team_diff |> select(-c(59:154))

# Remove variables that are identical to another variable or a linear 
# combination of other variables in the dataset (and goal_diff):
# IMPORTANT NOTE: leave goal_diff in team_diff dataset 
                # but will remove from RL_numeric
team_diff <- team_diff |> select(-c("boost_amount_collected_diff",
                                    "boost_amount_stolen_diff",
                                    "demo_taken_diff",
                                    "winner_orange"))

# create a winner_factor variable that can be used for classification problems
team_diff <- team_diff |> mutate(winner_factor = 
                                   as.factor(as.character(winner_numeric)))

# only keep rows where shooting percentage difference is less than absolute 
# value of 100, because it is not possible for anything to be outside of this
team_diff <- team_diff |> filter(core_shooting_percentage_diff >= -100)
team_diff <- team_diff |> filter(core_shooting_percentage_diff <= 100)

# Remove any NA values:
team_diff <- na.omit(team_diff)

# To make train/test split more fair, keep all series in one or the other,
# not both, by creating a series_id
team_diff <- team_diff |> 
  mutate(series_id = paste(team_id, team_id_orange, sep = "_"))

# reorder the dataset so all of the non-numeric variables come before numeric:
team_diff <- team_diff |>
  select(series_id, game_id, team_id, team_id_orange, winner, winner_factor, 
         winner_numeric, team_slug, team_slug_orange, team_name, 
         team_name_orange, team_region, team_region_orange, ends_with("_diff"), 
         everything())
ggpairs(data = team_diff, columns = c("winner", 
                                      "demo_inflicted_diff",
                                      "positioning_time_behind_ball_diff",
                                      "core_shots_diff",
                                      "boost_time_zero_boost_diff"), 
        lower = list(combo = wrap(ggally_facethist, bins = 15)))
```

## Decision Tree Example:

```{r}
library(janitor)
library(tree)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(caret)
library(ranger)
library(vip)
library(here)
games_by_players <- 
  read_csv("~/Desktop/SLU_Fellows/RL_Datasets/games_by_players.csv")

#Calculate the team's standard deviations within each variable within each game:
team_std <- games_by_players |>
  group_by(game_id, team_id) |>
  # calculate the standard deviations for each team for each numeric variable
  summarise(across(where(is.numeric), \(x) sd(x, na.rm =TRUE),
                   .names = "sd_{.col}"),
            color = sample(color, size = 1),
            winner = sample(winner, size = 1)) |>
  ungroup() 


team_std <- team_std |> select(game_id, color, everything()) |>
  pivot_wider(id_cols = game_id, 
              names_from = color,
              values_from = -c(1, 2)) |>
  # keep only game_id, team_id, and SDs 
  select(game_id, winner_blue, starts_with("sd_")) 

team_std <- team_std |> 
  mutate(across(where(is.numeric) & ends_with("_blue"),
                .names = "{col}_diff") -
           across(where(is.numeric) & ends_with("_orange"))) |>
  # keep only diff variables, and game_id
  select(game_id, winner_blue, ends_with("_diff")) 


# Merge this dataset with team_diff:
RL_joined <- left_join(team_diff, team_std, by = c("game_id" = "game_id"))

# Remove rows with NAs from the dataset
RL_joined <- na.omit(RL_joined)


# Output a csv with the joined team and players datasets:
# (this should include all of the diff variables and all of the sd variables)
write_csv(x = RL_joined, "~/Desktop/SLU_Fellows/RL_Datasets/RL_joined.csv")






## NOW CREATE AND TIDY RL_numeric AS SEPARATE CSV:

# Only keep winner and variables that are numeric:
RL_numeric <- RL_joined %>% select(where(is.numeric), series_id, winner_factor)

# Remove some numeric predictors that have obvious correlation to game outcome:
RL_numeric <- RL_numeric %>% select(-c("core_goals_diff",
                                       "core_assists_diff",
                                       # keeping winnner_factor instead 
                                       # of winner numeric
                                       "winner_numeric",
                                       "core_score_diff"))

# Order the dataset to have series_id and winner factor come first
RL_numeric <- RL_numeric %>% select(series_id, winner_factor, everything())

set.seed(993)
RL_splits <- group_initial_split(RL_numeric, group = series_id, prop = 0.8)
RL_train <- training(RL_splits)
RL_test <- testing(RL_splits)
library(rpart)
library(rpart.plot)
clean_tree <- rpart(winner_factor ~ . - series_id, data = RL_train)
rpart.plot(clean_tree)
```

## What I've Done So Far

-   Data manipulation, tidying, creating difference variables
-   Created different models and visual representations
-   Github and paper write-up

## Next Steps

-   Further variable investigation and touching up on Random Forest Model

-   Creating a poster and presentation about project

-   Complete a final draft of the project paper

## Questions?
