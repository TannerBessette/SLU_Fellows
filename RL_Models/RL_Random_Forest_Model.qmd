---
title: "Random Forest Model to Predict RL Game Outcome"
format: html
---

Load in necessary libraries:
```{r}
library(janitor)
library(tree)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(caret)
library(ranger)
library(vip)
```


Read in dataset:
```{r}
library(here)
RL_numeric <- read_csv(here("RL_Datasets/RL_numeric.csv"), 
        col_types = cols(winner_factor = readr::col_factor()))
```


Build Random Forest Model:
```{r}
set.seed(993)
RL_splits <- group_initial_split(RL_numeric, group = series_id, prop = 0.8)
RL_train <- training(RL_splits)
RL_test <- testing(RL_splits)

RL_resamples <- group_vfold_cv(RL_train, v = 5, group = series_id)

RL_train_tree <- tree(winner_factor ~ . - series_id, data = RL_train)

plot(RL_train_tree)
text(RL_train_tree)
```


Get predictions and calculate model classification accuracy:
```{r}
RL_fit <- fit(RL_workflow, data = RL_train)
RL_predictions <- predict(RL_fit, new_data = RL_test)
predictions <- predict(RL_train_tree, newdata = RL_test)
# if more than 50% likely 
predictions <- if_else(predictions > 0.5, 
                       true = TRUE, 
                       false = FALSE)
accuracy <- mean(RL_predictions == RL_test$winner_factor)
accuracy
```

The Random Forest model predicted game outcome with 95.537% accuracy.


Cleaner visual of the random forest tree output:
```{r}
library(rpart)
library(rpart.plot)
clean_tree <- rpart(winner_factor ~ . - series_id, data = RL_train)
clean_tree
rpart.plot(clean_tree)
```


Build actual Random Forest model:
```{r}
# Preprocess the data for modelling
RL_recipe <- recipe(winner_factor ~ ., data = RL_train) %>% 
  step_rm(series_id) %>%
  step_rm(core_shooting_percentage_diff) %>%
  step_normalize(all_numeric_predictors()) 

# Build a random forest model specification
rf_spec <- rand_forest() %>% 
  set_engine("ranger", importance = "impurity") %>% 
  set_mode("classification")

# Bundle recipe and model spec into a workflow
rf_wf <- workflow() %>% 
  add_recipe(RL_recipe) %>% 
  add_model(rf_spec)

# Fit a model
rf_wf_fit <- rf_wf %>% 
  fit(data = RL_train)

# Make predictions on test data
results <- RL_test %>% select(winner_factor) %>% 
  bind_cols(rf_wf_fit %>% 
              predict(new_data = RL_test)) %>% 
  bind_cols(rf_wf_fit %>% 
              predict(new_data = RL_test, type = "prob"))

# Print out predictions
results %>% 
  slice_head(n = 10)
```

```{r}
# get results in a confusion matrix:
results %>% 
  conf_mat(winner_factor, .pred_class)
```

```{r}
(1950 + 1332)/(1950 + 1332 + 130 + 90)
```

The random forest model classified game outcome (win/loss) with 93.718% 
accuracy.


See the importance of variables in the random forest model:
```{r}
# Extract the fitted model from the workflow
rf_wf_fit %>% 
  extract_fit_parsnip() %>% 
# Make VIP plot
  vip()
```



